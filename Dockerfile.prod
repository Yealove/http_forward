# 生产环境优化的 Dockerfile
# 多阶段构建 - 第一阶段：构建前端
FROM node:18-alpine AS frontend-builder

# 设置工作目录
WORKDIR /app/frontend

# 复制前端package文件
COPY frontend/package*.json ./

# 使用npm ci提高安装速度和可靠性
RUN npm ci --only=production

# 复制前端源码
COPY frontend/ ./

# 构建前端（生产模式）
RUN npm run build

# 第二阶段：后端依赖构建
FROM node:18-alpine AS backend-builder

WORKDIR /app

# 复制后端package文件
COPY package*.json ./

# 安装所有依赖（包括devDependencies，用于可能的构建步骤）
RUN npm ci

# 第三阶段：运行时环境
FROM node:18-alpine AS runtime

# 创建非root用户
RUN addgroup -g 1001 -S nodejs && \
    adduser -S callback -u 1001

# 安装系统依赖
RUN apk add --no-cache \
    sqlite \
    dumb-init \
    wget

# 设置工作目录
WORKDIR /app

# 复制后端依赖
COPY --from=backend-builder /app/node_modules ./node_modules
COPY --from=backend-builder /app/package*.json ./

# 复制后端源码
COPY backend/ ./backend/

# 从前端构建阶段复制构建产物
COPY --from=frontend-builder /app/frontend/dist ./frontend/dist

# 创建数据库目录并设置权限
RUN mkdir -p /app/backend/database && \
    chown -R callback:nodejs /app

# 切换到非root用户
USER callback

# 设置环境变量
ENV NODE_ENV=production
ENV PORT=3000

# 暴露端口
EXPOSE 3000

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:3000/ || exit 1

# 使用dumb-init作为PID 1进程，处理信号
ENTRYPOINT ["dumb-init", "--"]

# 启动命令
CMD ["node", "backend/app.js"]